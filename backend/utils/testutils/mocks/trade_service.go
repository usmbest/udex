// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	types "github.com/citypayorg/udex/backend/types"
	mock "github.com/stretchr/testify/mock"

	ws "github.com/citypayorg/udex/backend/ws"
)

// TradeService is an autogenerated mock type for the TradeService type
type TradeService struct {
	mock.Mock
}

// GetAllTradesByPairAssets provides a mock function with given fields: bt, qt
func (_m *TradeService) GetAllTradesByPairAssets(bt string, qt string) ([]*types.Trade, error) {
	ret := _m.Called(bt, qt)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string, string) []*types.Trade); ok {
		r0 = rf(bt, qt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(bt, qt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByHash provides a mock function with given fields: h
func (_m *TradeService) GetByHash(h string) (*types.Trade, error) {
	ret := _m.Called(h)

	var r0 *types.Trade
	if rf, ok := ret.Get(0).(func(string) *types.Trade); ok {
		r0 = rf(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(h)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByHashes provides a mock function with given fields: hashes
func (_m *TradeService) GetByHashes(hashes []string) ([]*types.Trade, error) {
	ret := _m.Called(hashes)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func([]string) []*types.Trade); ok {
		r0 = rf(hashes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(hashes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMakerOrderHash provides a mock function with given fields: h
func (_m *TradeService) GetByMakerOrderHash(h string) ([]*types.Trade, error) {
	ret := _m.Called(h)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string) []*types.Trade); ok {
		r0 = rf(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(h)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrderHashes provides a mock function with given fields: h
func (_m *TradeService) GetByOrderHashes(h []string) ([]*types.Trade, error) {
	ret := _m.Called(h)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func([]string) []*types.Trade); ok {
		r0 = rf(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(h)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPairName provides a mock function with given fields: p
func (_m *TradeService) GetByPairName(p string) ([]*types.Trade, error) {
	ret := _m.Called(p)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string) []*types.Trade); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTakerOrderHash provides a mock function with given fields: h
func (_m *TradeService) GetByTakerOrderHash(h string) ([]*types.Trade, error) {
	ret := _m.Called(h)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string) []*types.Trade); ok {
		r0 = rf(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(h)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTriggerUnitHash provides a mock function with given fields: h
func (_m *TradeService) GetByTriggerUnitHash(h string) ([]*types.Trade, error) {
	ret := _m.Called(h)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string) []*types.Trade); ok {
		r0 = rf(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(h)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserAddress provides a mock function with given fields: a
func (_m *TradeService) GetByUserAddress(a string) ([]*types.Trade, error) {
	ret := _m.Called(a)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string) []*types.Trade); ok {
		r0 = rf(a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSortedTrades provides a mock function with given fields: bt, qt, n
func (_m *TradeService) GetSortedTrades(bt string, qt string, n int) ([]*types.Trade, error) {
	ret := _m.Called(bt, qt, n)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string, string, int) []*types.Trade); ok {
		r0 = rf(bt, qt, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(bt, qt, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSortedTradesByUserAddress provides a mock function with given fields: a, limit
func (_m *TradeService) GetSortedTradesByUserAddress(a string, limit ...int) ([]*types.Trade, error) {
	_va := make([]interface{}, len(limit))
	for _i := range limit {
		_va[_i] = limit[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, a)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string, ...int) []*types.Trade); ok {
		r0 = rf(a, limit...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...int) error); ok {
		r1 = rf(a, limit...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: c, bt, qt
func (_m *TradeService) Subscribe(c *ws.Client, bt string, qt string) {
	_m.Called(c, bt, qt)
}

// Unsubscribe provides a mock function with given fields: c
func (_m *TradeService) Unsubscribe(c *ws.Client) {
	_m.Called(c)
}

// UnsubscribeChannel provides a mock function with given fields: c, bt, qt
func (_m *TradeService) UnsubscribeChannel(c *ws.Client, bt string, qt string) {
	_m.Called(c, bt, qt)
}

// UpdatePendingTrade provides a mock function with given fields: t, txh
func (_m *TradeService) UpdatePendingTrade(t *types.Trade, txh string) (*types.Trade, error) {
	ret := _m.Called(t, txh)

	var r0 *types.Trade
	if rf, ok := ret.Get(0).(func(*types.Trade, string) *types.Trade); ok {
		r0 = rf(t, txh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Trade, string) error); ok {
		r1 = rf(t, txh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSuccessfulTrade provides a mock function with given fields: t
func (_m *TradeService) UpdateSuccessfulTrade(t *types.Trade) (*types.Trade, error) {
	ret := _m.Called(t)

	var r0 *types.Trade
	if rf, ok := ret.Get(0).(func(*types.Trade) *types.Trade); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Trade) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTradeStatus provides a mock function with given fields: t, status
func (_m *TradeService) UpdateTradeStatus(t *types.Trade, status string) (*types.Trade, error) {
	ret := _m.Called(t, status)

	var r0 *types.Trade
	if rf, ok := ret.Get(0).(func(*types.Trade, string) *types.Trade); ok {
		r0 = rf(t, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Trade, string) error); ok {
		r1 = rf(t, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTradeTxHash provides a mock function with given fields: tr, txh
func (_m *TradeService) UpdateTradeTxHash(tr *types.Trade, txh string) error {
	ret := _m.Called(tr, txh)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Trade, string) error); ok {
		r0 = rf(tr, txh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
