// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	bson "github.com/globalsign/mgo/bson"

	mock "github.com/stretchr/testify/mock"

	types "github.com/citypayorg/udex/backend/types"
)

// PairService is an autogenerated mock type for the PairService type
type PairService struct {
	mock.Mock
}

// Create provides a mock function with given fields: pair
func (_m *PairService) Create(pair *types.Pair) error {
	ret := _m.Called(pair)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Pair) error); ok {
		r0 = rf(pair)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePairs provides a mock function with given fields: token
func (_m *PairService) CreatePairs(token string) ([]*types.Pair, error) {
	ret := _m.Called(token)

	var r0 []*types.Pair
	if rf, ok := ret.Get(0).(func(string) []*types.Pair); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Pair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *PairService) GetAll() ([]types.Pair, error) {
	ret := _m.Called()

	var r0 []types.Pair
	if rf, ok := ret.Get(0).(func() []types.Pair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Pair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllExactTokenPairData provides a mock function with given fields:
func (_m *PairService) GetAllExactTokenPairData() ([]*types.PairData, error) {
	ret := _m.Called()

	var r0 []*types.PairData
	if rf, ok := ret.Get(0).(func() []*types.PairData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.PairData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSimplifiedTokenPairData provides a mock function with given fields:
func (_m *PairService) GetAllSimplifiedTokenPairData() ([]*types.SimplifiedPairAPIData, error) {
	ret := _m.Called()

	var r0 []*types.SimplifiedPairAPIData
	if rf, ok := ret.Get(0).(func() []*types.SimplifiedPairAPIData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.SimplifiedPairAPIData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTokenPairData provides a mock function with given fields:
func (_m *PairService) GetAllTokenPairData() ([]*types.PairAPIData, error) {
	ret := _m.Called()

	var r0 []*types.PairAPIData
	if rf, ok := ret.Get(0).(func() []*types.PairAPIData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.PairAPIData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByAsset provides a mock function with given fields: bt, qt
func (_m *PairService) GetByAsset(bt string, qt string) (*types.Pair, error) {
	ret := _m.Called(bt, qt)

	var r0 *types.Pair
	if rf, ok := ret.Get(0).(func(string, string) *types.Pair); ok {
		r0 = rf(bt, qt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Pair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(bt, qt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *PairService) GetByID(id bson.ObjectId) (*types.Pair, error) {
	ret := _m.Called(id)

	var r0 *types.Pair
	if rf, ok := ret.Get(0).(func(bson.ObjectId) *types.Pair); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Pair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bson.ObjectId) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListedPairs provides a mock function with given fields:
func (_m *PairService) GetListedPairs() ([]types.Pair, error) {
	ret := _m.Called()

	var r0 []types.Pair
	if rf, ok := ret.Get(0).(func() []types.Pair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Pair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokenPairData provides a mock function with given fields: bt, qt
func (_m *PairService) GetTokenPairData(bt string, qt string) ([]*types.Tick, error) {
	ret := _m.Called(bt, qt)

	var r0 []*types.Tick
	if rf, ok := ret.Get(0).(func(string, string) []*types.Tick); ok {
		r0 = rf(bt, qt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Tick)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(bt, qt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnlistedPairs provides a mock function with given fields:
func (_m *PairService) GetUnlistedPairs() ([]types.Pair, error) {
	ret := _m.Called()

	var r0 []types.Pair
	if rf, ok := ret.Get(0).(func() []types.Pair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Pair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
