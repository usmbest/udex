// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	bson "github.com/globalsign/mgo/bson"

	mock "github.com/stretchr/testify/mock"

	time "time"

	types "github.com/citypayorg/udex/udex-backend/types"
)

// TradeDao is an autogenerated mock type for the TradeDao type
type TradeDao struct {
	mock.Mock
}

// Aggregate provides a mock function with given fields: q
func (_m *TradeDao) Aggregate(q []bson.M) ([]*types.Tick, error) {
	ret := _m.Called(q)

	var r0 []*types.Tick
	if rf, ok := ret.Get(0).(func([]bson.M) []*types.Tick); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Tick)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]bson.M) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: o
func (_m *TradeDao) Create(o ...*types.Trade) error {
	_va := make([]interface{}, len(o))
	for _i := range o {
		_va[_i] = o[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...*types.Trade) error); ok {
		r0 = rf(o...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Drop provides a mock function with given fields:
func (_m *TradeDao) Drop() {
	_m.Called()
}

// FindAndModify provides a mock function with given fields: h, t
func (_m *TradeDao) FindAndModify(h string, t *types.Trade) (*types.Trade, error) {
	ret := _m.Called(h, t)

	var r0 *types.Trade
	if rf, ok := ret.Get(0).(func(string, *types.Trade) *types.Trade); ok {
		r0 = rf(h, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *types.Trade) error); ok {
		r1 = rf(h, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *TradeDao) GetAll() ([]types.Trade, error) {
	ret := _m.Called()

	var r0 []types.Trade
	if rf, ok := ret.Get(0).(func() []types.Trade); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTradesByPairAssets provides a mock function with given fields: bt, qt
func (_m *TradeDao) GetAllTradesByPairAssets(bt string, qt string) ([]*types.Trade, error) {
	ret := _m.Called(bt, qt)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string, string) []*types.Trade); ok {
		r0 = rf(bt, qt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(bt, qt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByHash provides a mock function with given fields: h
func (_m *TradeDao) GetByHash(h string) (*types.Trade, error) {
	ret := _m.Called(h)

	var r0 *types.Trade
	if rf, ok := ret.Get(0).(func(string) *types.Trade); ok {
		r0 = rf(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(h)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByHashes provides a mock function with given fields: hashes
func (_m *TradeDao) GetByHashes(hashes []string) ([]*types.Trade, error) {
	ret := _m.Called(hashes)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func([]string) []*types.Trade); ok {
		r0 = rf(hashes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(hashes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMakerOrderHash provides a mock function with given fields: h
func (_m *TradeDao) GetByMakerOrderHash(h string) ([]*types.Trade, error) {
	ret := _m.Called(h)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string) []*types.Trade); ok {
		r0 = rf(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(h)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrderHashes provides a mock function with given fields: hashes
func (_m *TradeDao) GetByOrderHashes(hashes []string) ([]*types.Trade, error) {
	ret := _m.Called(hashes)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func([]string) []*types.Trade); ok {
		r0 = rf(hashes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(hashes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPairName provides a mock function with given fields: name
func (_m *TradeDao) GetByPairName(name string) ([]*types.Trade, error) {
	ret := _m.Called(name)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string) []*types.Trade); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTakerOrderHash provides a mock function with given fields: h
func (_m *TradeDao) GetByTakerOrderHash(h string) ([]*types.Trade, error) {
	ret := _m.Called(h)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string) []*types.Trade); ok {
		r0 = rf(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(h)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTriggerUnitHash provides a mock function with given fields: h
func (_m *TradeDao) GetByTriggerUnitHash(h string) ([]*types.Trade, error) {
	ret := _m.Called(h)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string) []*types.Trade); ok {
		r0 = rf(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(h)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserAddress provides a mock function with given fields: a
func (_m *TradeDao) GetByUserAddress(a string) ([]*types.Trade, error) {
	ret := _m.Called(a)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string) []*types.Trade); ok {
		r0 = rf(a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetErroredTradeCount provides a mock function with given fields: start, end
func (_m *TradeDao) GetErroredTradeCount(start time.Time, end time.Time) (int, error) {
	ret := _m.Called(start, end)

	var r0 int
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) int); ok {
		r0 = rf(start, end)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNTradesByPairAssets provides a mock function with given fields: bt, qt, n
func (_m *TradeDao) GetNTradesByPairAssets(bt string, qt string, n int) ([]*types.Trade, error) {
	ret := _m.Called(bt, qt, n)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string, string, int) []*types.Trade); ok {
		r0 = rf(bt, qt, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(bt, qt, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSortedTrades provides a mock function with given fields: bt, qt, n
func (_m *TradeDao) GetSortedTrades(bt string, qt string, n int) ([]*types.Trade, error) {
	ret := _m.Called(bt, qt, n)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string, string, int) []*types.Trade); ok {
		r0 = rf(bt, qt, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(bt, qt, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSortedTradesByUserAddress provides a mock function with given fields: a, limit
func (_m *TradeDao) GetSortedTradesByUserAddress(a string, limit ...int) ([]*types.Trade, error) {
	_va := make([]interface{}, len(limit))
	for _i := range limit {
		_va[_i] = limit[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, a)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string, ...int) []*types.Trade); ok {
		r0 = rf(a, limit...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...int) error); ok {
		r1 = rf(a, limit...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTradesByPairAssets provides a mock function with given fields: bt, qt, n
func (_m *TradeDao) GetTradesByPairAssets(bt string, qt string, n int) ([]*types.Trade, error) {
	ret := _m.Called(bt, qt, n)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string, string, int) []*types.Trade); ok {
		r0 = rf(bt, qt, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(bt, qt, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUncommittedTradesByUserAddress provides a mock function with given fields: a
func (_m *TradeDao) GetUncommittedTradesByUserAddress(a string) []*types.Trade {
	ret := _m.Called(a)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string) []*types.Trade); ok {
		r0 = rf(a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	return r0
}

// Update provides a mock function with given fields: t
func (_m *TradeDao) Update(t *types.Trade) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Trade) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateByHash provides a mock function with given fields: h, t
func (_m *TradeDao) UpdateByHash(h string, t *types.Trade) error {
	ret := _m.Called(h, t)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *types.Trade) error); ok {
		r0 = rf(h, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTradeStatus provides a mock function with given fields: h, status
func (_m *TradeDao) UpdateTradeStatus(h string, status string) error {
	ret := _m.Called(h, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(h, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTradeStatuses provides a mock function with given fields: status, hashes
func (_m *TradeDao) UpdateTradeStatuses(status string, hashes ...string) ([]*types.Trade, error) {
	_va := make([]interface{}, len(hashes))
	for _i := range hashes {
		_va[_i] = hashes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, status)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string, ...string) []*types.Trade); ok {
		r0 = rf(status, hashes...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(status, hashes...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTradeStatusesByOrderHashes provides a mock function with given fields: status, hashes
func (_m *TradeDao) UpdateTradeStatusesByOrderHashes(status string, hashes ...string) ([]*types.Trade, error) {
	_va := make([]interface{}, len(hashes))
	for _i := range hashes {
		_va[_i] = hashes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, status)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*types.Trade
	if rf, ok := ret.Get(0).(func(string, ...string) []*types.Trade); ok {
		r0 = rf(status, hashes...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(status, hashes...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
